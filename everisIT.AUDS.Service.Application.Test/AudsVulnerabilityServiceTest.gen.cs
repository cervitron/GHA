using everisIT.AUDS.Service.Application.Adapters;
using everisIT.AUDS.Service.Application.Adapters.Interfaces;
using everisIT.AUDS.Service.Application.Dtos;
using everisIT.AUDS.Service.Application.Services;
using everisIT.AUDS.Service.Application.Services.Interfaces;
using everisIT.AUDS.Service.Infrastructure.Filters;
using everisIT.AUDS.Service.Infrastructure.Filters.Interfaces;
using everisIT.AUDS.Service.Infrastructure.Models;
using everisIT.AUDS.Service.Infrastructure.Repositories.Interfaces;
using Moq;
using System;
using System.Collections.Generic;
using System.Linq;
using Xunit;

namespace everisIT.AUDS.Service.AudsVulnerabilityTest
{
    [Collection("Sequential")]
    public partial class AudsVulnerabilityServiceTest
    {
        private readonly Mock<IAudsVulnerabilityRepository> _audsVulnerabilityRepository;
        private readonly IAudsVulnerabilityService _audsVulnerabilityService;
        private readonly IAudsVulnerabilityService _audsVulnerabilityServiceMockAdapter;
        private readonly IDataMasterZeusService _dataMasterZeusService;
        private readonly IAudsStateService _audsStateService;
        private readonly IAudsRiskService _audsRiskService;
        private readonly IBaseAdapter<AudsVulnerabilityDto, AudsVulnerability> adapter;
        Mock<IBaseAdapter<AudsVulnerabilityDto, AudsVulnerability>> mockAdapter;
        private readonly Mock<IDataMasterZeusService> _dataMasterZeusServiceMock;
        private readonly Mock<IAudsStateService> _audsStateServiceMock;
        private readonly Mock<IAudsRiskService> _audsRiskServiceMock;

        public AudsVulnerabilityServiceTest()
        {
            //Arrange
			adapter = new AudsVulnerabilityAdapter();
            mockAdapter = new Mock<IBaseAdapter<AudsVulnerabilityDto, AudsVulnerability>>();
            _dataMasterZeusServiceMock = new Mock<IDataMasterZeusService>();
            _audsStateServiceMock = new Mock<IAudsStateService>();
            _audsRiskServiceMock = new Mock<IAudsRiskService>();
            _audsVulnerabilityRepository = new Mock<IAudsVulnerabilityRepository>();
            _audsVulnerabilityService = new AudsVulnerabilityService(_audsVulnerabilityRepository.Object, adapter, _dataMasterZeusServiceMock.Object, _audsStateServiceMock.Object, _audsRiskServiceMock.Object);
            _audsVulnerabilityServiceMockAdapter = new AudsVulnerabilityService(_audsVulnerabilityRepository.Object, mockAdapter.Object, _dataMasterZeusServiceMock.Object, _audsStateServiceMock.Object, _audsRiskServiceMock.Object);
        }

		[Fact]
        [Trait("Category", "UnitTests")]
        [Trait("Category", "AudsVulnerabilityService")]
        [Trait("Category", "OK")]
        [Trait("Category", "Constructor")]
        public void Constructor_Test_Exception()
        {
            AudsVulnerabilityService audsVulnerabilityService;

            Assert.Throws<ArgumentNullException>(() => audsVulnerabilityService = new AudsVulnerabilityService(null, adapter, null, null, null));
            Assert.Throws<ArgumentNullException>(() => audsVulnerabilityService = new AudsVulnerabilityService(_audsVulnerabilityRepository.Object, null, null, null, null));
        }

        [Fact]
        [Trait("Category", "UnitTests")]
        [Trait("Category", "AudsVulnerabilityService")]
        [Trait("Category", "OK")]
        [Trait("Category", "AudsVulnerabilityUnitTest")]
        public void Insert_AudsVulnerability_Test_OK()
        {
            //Arrange
            var entityModel = new AudsVulnerability() { VulnerabilityId = 1 };
            var entityDto = new AudsVulnerabilityDto() { VulnerabilityId = 1 };
            _audsVulnerabilityRepository.Setup(x => x.Create(It.IsAny<AudsVulnerability>())).ReturnsAsync(entityModel);
            //Action
            var result = _audsVulnerabilityService.Create(entityDto).Result;
            //Assert
            Assert.NotNull(result);        
        }

        [Fact]
        [Trait("Category", "UnitTests")]
        [Trait("Category", "AudsVulnerabilityService")]
        [Trait("Category", "KO")]
        [Trait("Category", "AudsVulnerabilityUnitTest")]
        public void Insert_AudsVulnerability_Test_KO()
        {
            //Arrange
            AudsVulnerability resultRepository = new AudsVulnerability();
            _audsVulnerabilityRepository.Setup(x => x.Create(null)).ReturnsAsync(resultRepository);
            //Action
            var result = _audsVulnerabilityService.Create(null).Result;
            //Assert
            Assert.NotNull(result);
            Assert.Equal(0, result.VulnerabilityId);
        }

        [Fact]
        [Trait("Category", "UnitTests")]
        [Trait("Category", "AudsVulnerabilityService")]
        [Trait("Category", "OK")]
        [Trait("Category", "AudsVulnerabilityUnitTest")]
        public void GetList_AudsVulnerabilitys_Test_OK()
        {
            //Arrange
            var inEntityModel = new AudsVulnerability() { VulnerabilityId = 1 };
            var outEntityModelDto = new AudsVulnerabilityDto() { VulnerabilityId = 1 };
            List<AudsVulnerability> listAudsVulnerability = new List<AudsVulnerability>{ inEntityModel };
            List<AudsVulnerabilityDto> listAUDSAudsVulnerabilityDto = new List<AudsVulnerabilityDto>{ outEntityModelDto };
            IAudsVulnerabilityFilter filters = new AudsVulnerabilityFilter()
            {
                CodeStatus = false
            };
            _audsVulnerabilityRepository.Setup(x => x.GetList(It.IsAny<AudsVulnerabilityFilter>())).ReturnsAsync(listAudsVulnerability);
            _audsStateServiceMock.Setup(x => x.Get(It.IsAny<int>())).ReturnsAsync(new AudsStateDto() { StateName = "NAME" });
            _audsRiskServiceMock.Setup(x => x.Get(It.IsAny<int>())).ReturnsAsync(new AudsRiskDto() { RiskName = "NAME" });
            //Action
            var result = _audsVulnerabilityService.GetList(filters).Result;
            //Assert
            Assert.NotNull(result);
        }

        [Fact]
        [Trait("Category", "UnitTests")]
        [Trait("Category", "AudsVulnerabilityService")]
        [Trait("Category", "KO")]
        [Trait("Category", "AudsVulnerabilityUnitTest")]
        public void GetList_AudsVulnerabilitys_Test_KO()
        {
            //Arrange
            _audsVulnerabilityRepository.Setup(x => x.GetList(It.IsAny<IAudsVulnerabilityFilter>())).ReturnsAsync(new List<AudsVulnerability>());
            IAudsVulnerabilityFilter filters = new AudsVulnerabilityFilter();
            //Action
            var result = _audsVulnerabilityService.GetList(filters).Result;
            //Assert
            Assert.Equal(0, result.Count);
        }

        [Fact]
        [Trait("Category", "UnitTests")]
        [Trait("Category", "AudsVulnerabilityService")]
        [Trait("Category", "OK")]
        [Trait("Category", "AudsVulnerabilityUnitTest")]
        public void Delete_by_id_Test_OK()
        {
            //Arrange
            var entityModel = new AudsVulnerability(){ VulnerabilityId = 1 };
            var entityDto = new AudsVulnerabilityDto(){ VulnerabilityId = 1 };
            _audsVulnerabilityRepository.Setup(x => x.Delete(It.IsAny<int>())).ReturnsAsync(entityModel);
            //Action
            var result = _audsVulnerabilityService.Delete(entityDto.VulnerabilityId).Result;
            //Assert
            Assert.Equal(entityDto.VulnerabilityId, result.VulnerabilityId);
        }

        [Fact]
        [Trait("Category", "UnitTests")]
        [Trait("Category", "AudsVulnerabilityService")]
        [Trait("Category", "KO")]
        [Trait("Category", "AudsVulnerabilityUnitTest")]
        public void Delete_by_id_Test_KO()
        {
            //Arrange
            AudsVulnerabilityDto result = null;
            mockAdapter.Setup(maper => maper.Map(It.IsAny<AudsVulnerability>())).Returns(result); 
			AudsVulnerability result1 = null;
            _audsVulnerabilityRepository.Setup(x => x.Delete(0)).ReturnsAsync(result1);
            //Action && Assert
            Assert.Null(_audsVulnerabilityServiceMockAdapter.Delete(0).Result);
        }

        [Fact]
        [Trait("Category", "UnitTests")]
        [Trait("Category", "AudsVulnerabilityService")]
        [Trait("Category", "OK")]
        [Trait("Category", "AudsVulnerabilityUnitTest")]
        public void Update_AudsVulnerability_Test_OK()
        {
            //Arrange
            var entityModel = new AudsVulnerability() { VulnerabilityId = 1 };
            var entityDto = new AudsVulnerabilityDto() { VulnerabilityId = 1 };
            var dataList = new List<AudsVulnerability>{ entityModel };
            var dataListDto = new List<AudsVulnerabilityDto>{ entityDto };
			_audsVulnerabilityRepository.Setup(x => x.Update(It.IsAny<AudsVulnerability>())).ReturnsAsync(entityModel);
            //Action
            var result = _audsVulnerabilityService.Update(entityDto).Result;
            //Assert
            Assert.NotNull(result);
            Assert.Equal(entityDto.VulnerabilityId, result.VulnerabilityId);
        }

        [Fact]
        [Trait("Category", "UnitTests")]
        [Trait("Category", "AudsVulnerabilityService")]
        [Trait("Category", "KO")]
        [Trait("Category", "AudsVulnerabilityUnitTest")]
        public void Update_AudsVulnerability_Test_KO()
        {
            //Arrange
			AudsVulnerability result = null;
            _audsVulnerabilityRepository.Setup(x => x.Update(null)).ReturnsAsync(result);
            //Action && Assert
            Assert.NotNull(_audsVulnerabilityService.Update(null).Result);
            Assert.Equal(0, _audsVulnerabilityService.Update(null).Result.VulnerabilityId);
        }

        [Fact]
        [Trait("Category", "UnitTests")]
        [Trait("Category", "AudsVulnerabilityService")]
        [Trait("Category", "KO")]
        [Trait("Category", "AudsVulnerabilityUnitTest")]
        public void Get_AudsVulnerability_by_id_Test_KO()
        {
            //Arrange
            int id = 1;
            AudsVulnerability result = new AudsVulnerability();
            _audsVulnerabilityRepository.Setup(x => x.Get(It.IsAny<int>())).ReturnsAsync(result);
            //Action
            var resultGet = _audsVulnerabilityService.Get(id).Result;
            //Assert
            Assert.Equal(0, resultGet.VulnerabilityId);
        }

        [Fact]
        [Trait("Category", "UnitTests")]
        [Trait("Category", "AudsVulnerabilityService")]
        [Trait("Category", "OK")]
        [Trait("Category", "AudsVulnerabilityUnitTest")]
        public void Get_AudsVulnerability_by_id_Test_OK()
        {
            //Arrange
            int id = 1;
			AudsVulnerability entityModel = new AudsVulnerability() { VulnerabilityId = 1 };
            _audsVulnerabilityRepository.Setup(x => x.Get(It.IsAny<int>())).ReturnsAsync(entityModel);
            //Action
            var result = _audsVulnerabilityService.Get(id).Result;
            //Assert
            Assert.Equal(entityModel.VulnerabilityId, result.VulnerabilityId);
        }
    }
}
