using everisIT.AUDS.Service.Infrastructure.Filters;
using everisIT.AUDS.Service.Infrastructure.Models;
using everisIT.AUDS.Service.Infrastructure.Repositories;
using everisIT.AUDS.Service.Infrastructure.Repositories.Interfaces;
using everisIT.AUDS.Service.Infrastructure.Test.DataTest;
using Microsoft.EntityFrameworkCore;
using System.Linq;
using Xunit;

namespace everisIT.AUDS.Service.Infrastructure.Test
{
    [Collection("Sequential")]
    public partial class AudsVulnerabilityHcoRepositoryTest
    {
        private readonly IAudsVulnerabilityHcoRepository _audsVulnerabilityHcoRepository;
        private readonly AUDSContextTest _aUDSContextTest;
        private readonly Fen2.Utils.EF.IUserResolverService _userResolver;

        public AudsVulnerabilityHcoRepositoryTest()
        {
            _userResolver = new Fen2.Utils.EF.MoqUserResolverService();
            _aUDSContextTest = new AUDSContextTest(_userResolver, new DbContextOptions<AUDSContext>());
            _audsVulnerabilityHcoRepository = new AudsVulnerabilityHcoRepository(_aUDSContextTest);
            AudsVulnerabilityHcoRepositoryDataTest.LoadContext(_aUDSContextTest);
        }

        [Fact]
        [Trait("Category", "UnitTests")]
        [Trait("Category", "AudsVulnerabilityHcoRepository")]
        [Trait("Category", "OK")]
        [Trait("Category", "AudsVulnerabilityHcoUnitTest")]
        public void Create_AudsVulnerabilityHco_Test_OK()
        {
            //Arrange 
            var audsVulnerabilityHcoModel = _aUDSContextTest.AudsVulnerabilityHco.FirstOrDefault();
            audsVulnerabilityHcoModel.VulnerabilityHcoId = 0;
            //Action
            var iResult = _audsVulnerabilityHcoRepository.Create(audsVulnerabilityHcoModel).Result;
            //Assert
            Assert.Equal(audsVulnerabilityHcoModel.VulnerabilityHcoId, iResult.VulnerabilityHcoId);
        }

        [Fact]
        [Trait("Category", "UnitTests")]
        [Trait("Category", "AudsVulnerabilityHcoRepository")]
        [Trait("Category", "OK")]
        [Trait("Category", "AudsVulnerabilityHcoUnitTest")]
        public void Get_All_AudsVulnerabilityHco_Test_OK()
        {
            //Action            
            var result = _audsVulnerabilityHcoRepository.GetList(null).Result;
            //Assert
            Assert.Equal(_aUDSContextTest.AudsVulnerabilityHco.Count(), result.Count());
        }

        [Fact]
        [Trait("Category", "UnitTests")]
        [Trait("Category", "AudsVulnerabilityHcoRepository")]
        [Trait("Category", "KO")]
        [Trait("Category", "AudsVulnerabilityHcoUnitTest")]
        public void Get_AudsVulnerabilityHco_Filtered_Test_KO()
        {
            //Arrange            
            var result = _audsVulnerabilityHcoRepository.GetList(new AudsVulnerabilityHcoFilter() { VulnerabilityHcoId = 0}).Result;
            //Assert
            Assert.Empty(result);
        }

        [Fact]
        [Trait("Category", "UnitTests")]
        [Trait("Category", "AudsVulnerabilityHcoRepository")]
        [Trait("Category", "OK")]
        [Trait("Category", "AudsVulnerabilityHcoUnitTest")]
        public void Update_AudsVulnerabilityHco_Test_OK()
        {
            //Arrange           
            var audsVulnerabilityHcoToUpdate = _aUDSContextTest.AudsVulnerabilityHco.FirstOrDefault();
            var originalValue = audsVulnerabilityHcoToUpdate.CodeStatus;

            var updatedValue = originalValue.Equals(true) ? false : true;
            audsVulnerabilityHcoToUpdate.CodeStatus = updatedValue;
            //Action
            var result = _audsVulnerabilityHcoRepository.Update(audsVulnerabilityHcoToUpdate).Result;
            //Assert
            Assert.NotEqual(originalValue, result.CodeStatus);
            Assert.Equal(updatedValue, result.CodeStatus);
        }

        [Fact]
        [Trait("Category", "UnitTests")]
        [Trait("Category", "AudsVulnerabilityHcoRepository")]
        [Trait("Category", "OK")]
        [Trait("Category", "AudsVulnerabilityHcoUnitTest")]
        public void Delete_AudsVulnerabilityHco_Test_OK()
        {
            //Arrange
            var audsVulnerabilityHcoModel = _aUDSContextTest.AudsVulnerabilityHco.Where(x => x.CodeStatus == true).FirstOrDefault();
            var codeStatusOriginal = audsVulnerabilityHcoModel.CodeStatus;
            //Action
            var audsVulnerabilityHcoUpdated = _audsVulnerabilityHcoRepository.Delete(audsVulnerabilityHcoModel.VulnerabilityHcoId).Result;
            //Assert
            Assert.Equal(audsVulnerabilityHcoUpdated.VulnerabilityHcoId, audsVulnerabilityHcoModel.VulnerabilityHcoId);
            Assert.NotEqual(audsVulnerabilityHcoUpdated.CodeStatus, codeStatusOriginal);//Uncomment only in case there is a logical deletion.
        }

        [Fact]
        [Trait("Category", "UnitTests")]
        [Trait("Category", "AudsVulnerabilityHcoRepository")]
        [Trait("Category", "KO")]
        [Trait("Category", "AudsVulnerabilityHcoUnitTest")]
        public void Delete_AudsVulnerabilityHco_Test_KO()
        {
            //Action
            var iAudsVulnerabilityHcoUpdated = _audsVulnerabilityHcoRepository.Delete(0).Result;
            //Assert
            Assert.Equal(0, iAudsVulnerabilityHcoUpdated.VulnerabilityHcoId);
        }

        [Fact]
        [Trait("Category", "UnitTests")]
        [Trait("Category", "AudsVulnerabilityHcoRepository")]
        [Trait("Category", "OK")]
        [Trait("Category", "AudsVulnerabilityHcoUnitTest")]
        public void Get_AudsVulnerabilityHco_by_id_Test_OK()
        {
            //Arrange
            var id = 3;
            //Action
            var result = _audsVulnerabilityHcoRepository.Get(id).Result;
            //Assert
            Assert.Equal(id, result.VulnerabilityHcoId);
        }

        [Fact]
        [Trait("Category", "UnitTests")]
        [Trait("Category", "AudsVulnerabilityHcoRepository")]
        [Trait("Category", "KO")]
        [Trait("Category", "AudsVulnerabilityHcoUnitTest")]
        public void Get_AudsVulnerabilityHco_by_id_Test_KO()
        {
            //Arrange
            var id = -1;
            //Action
            var result = _audsVulnerabilityHcoRepository.Get(id).Result;
            //Assert
            Assert.Equal(0, result.VulnerabilityHcoId);
        }
    }
}