using System.Collections.Generic;
using everisIT.AUDS.Service.Application.Dtos;
using everisIT.AUDS.Service.Infrastructure.Models;

namespace everisIT.AUDS.Service.Application.Adapters
{
    public partial class AudsVulnerabilityAdapter : BaseAdapter<AudsVulnerabilityDto, AudsVulnerability>
    {
        public override AudsVulnerability Map(AudsVulnerabilityDto entityDto)
        {
            return entityDto == null ? null : new AudsVulnerability()
            { 
                VulnerabilityId = entityDto.VulnerabilityId, 
                VulnerabilityIdControl = entityDto.VulnerabilityIdControl, 
                VulnerabilityDateIdentification = entityDto.VulnerabilityDateIdentification, 
                VulnerabilityDateMitigation = entityDto.VulnerabilityDateMitigation, 
                VulnerabilityDateResolution = entityDto.VulnerabilityDateResolution, 
                VulnerabilityDescription = entityDto.VulnerabilityDescription, 
                VulnerabilityResponsible = entityDto.VulnerabilityResponsible, 
                StateId = entityDto.StateId, 
                StateIdResolution = entityDto.StateIdResolution, 
                RiskId = entityDto.RiskId, 
                AuditId = entityDto.AuditId,
                DateNewRegister = entityDto.DateNewRegister,
                DateLastUpdateRegister = entityDto.DateLastUpdateRegister, 
                CodeStatus = entityDto.CodeStatus, 
                VulnerabilityActionPlans = entityDto.VulnerabilityActionPlans, 
                VulnerabilityDateCommitment = entityDto.VulnerabilityDateCommitment, 
            };
        }

        public override AudsVulnerabilityDto Map(AudsVulnerability entity)
        {
            return entity == null ? null : new AudsVulnerabilityDto()
            { 
                VulnerabilityId = entity.VulnerabilityId, 
                VulnerabilityIdControl = entity.VulnerabilityIdControl, 
                VulnerabilityDateIdentification = entity.VulnerabilityDateIdentification, 
                VulnerabilityDateMitigation = entity.VulnerabilityDateMitigation, 
                VulnerabilityDateResolution = entity.VulnerabilityDateResolution, 
                VulnerabilityDescription = entity.VulnerabilityDescription, 
                VulnerabilityResponsible = entity.VulnerabilityResponsible, 
                StateId = entity.StateId, 
                StateIdResolution = entity.StateIdResolution, 
                RiskId = entity.RiskId, 
                AuditId = entity.AuditId,
                DateNewRegister = entity.DateNewRegister,
                DateLastUpdateRegister = entity.DateLastUpdateRegister, 
                CodeStatus = entity.CodeStatus, 
                VulnerabilityActionPlans = entity.VulnerabilityActionPlans, 
                VulnerabilityDateCommitment = entity.VulnerabilityDateCommitment, 
            };
        }

        public override List<AudsVulnerability> Map(List<AudsVulnerabilityDto> listDto)
        {
            List<AudsVulnerability> list = null;

            if (listDto != null)
            {
                list = new List<AudsVulnerability>();

                foreach (var item in listDto)
                {
                    list.Add(Map(item));
                }
            }
            return list;
        }


        public override IList<AudsVulnerabilityDto> Map(IList<AudsVulnerability> list)
        {
            List<AudsVulnerabilityDto> listDto = null;

            if (list != null)
            {
                listDto = new List<AudsVulnerabilityDto>();

                foreach (var item in list)
                {
                    listDto.Add(Map(item));
                }
            }
            return listDto;
        }
    }
}