using everisIT.AUDS.Service.Application.Adapters.Interfaces;
using everisIT.AUDS.Service.Application.Dtos;
using everisIT.AUDS.Service.Application.Services.Interfaces;
using everisIT.AUDS.Service.Infrastructure.Filters.Interfaces;
using everisIT.AUDS.Service.Infrastructure.Models;
using everisIT.AUDS.Service.Infrastructure.Repositories.Interfaces;
using System;
using System.Threading.Tasks;

namespace everisIT.AUDS.Service.Application.Services
{
    public partial class AudsVulnerabilityService : IAudsVulnerabilityService
    {
        
        /// <summary>
        /// Insert an AudsVulnerability
        /// </summary>
        /// <param name="dataDto"></param>
        /// <returns>AudsVulnerabilityDto</returns>
        public async Task<AudsVulnerabilityDto> Create(AudsVulnerabilityDto dataDto)
        {            
            if (dataDto == null)
            {
                return new AudsVulnerabilityDto();
            }
            return adapter.Map(await audsVulnerabilityRepository.Create(adapter.Map(dataDto)));            
        }

       

        /// <summary>
        /// Update the AudsVulnerability Status to Enable or Disable it
        /// </summary>
        /// <param name="id"></param>
        /// <returns>AudsVulnerability ID</returns>
        public async Task<AudsVulnerabilityDto> Delete(int id)
        {
            return adapter.Map(await audsVulnerabilityRepository.Delete(id));            
        }

        /// <summary>
        /// Update an audsVulnerability to a new audsVulnerability object passed by parameter
        /// </summary>
        /// <param name="dataDto"></param>
        /// <returns>AudsVulnerability ID</returns>
        public async Task<AudsVulnerabilityDto> Update(AudsVulnerabilityDto dataDto)
        {            
            if (dataDto == null)
            {
                return new AudsVulnerabilityDto();
            }
            return adapter.Map(await audsVulnerabilityRepository.Update(adapter.Map(dataDto)));            
        }

        public async Task<AudsVulnerabilityDto> Get(int id)
        {            
            return adapter.Map(await audsVulnerabilityRepository.Get(id));
        }
    }
}