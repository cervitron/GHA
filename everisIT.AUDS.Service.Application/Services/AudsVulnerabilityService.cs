using everisIT.AUDS.Service.Application.Adapters.Interfaces;
using everisIT.AUDS.Service.Application.Dtos;
using everisIT.AUDS.Service.Application.Services.Interfaces;
using everisIT.AUDS.Service.Infrastructure.Filters.Interfaces;
using everisIT.AUDS.Service.Infrastructure.Models;
using everisIT.AUDS.Service.Infrastructure.Repositories.Interfaces;
using System;
using System.Threading.Tasks;

namespace everisIT.AUDS.Service.Application.Services
{
    public partial class AudsVulnerabilityService : IAudsVulnerabilityService
    {

        private readonly IAudsVulnerabilityRepository audsVulnerabilityRepository;
        private readonly IBaseAdapter<AudsVulnerabilityDto, AudsVulnerability> adapter;
        private readonly IDataMasterZeusService _dataMasterZeusService;
        private readonly IAudsStateService _audsStateService;
        private readonly IAudsRiskService _audsRiskService;

        /// <summary>
        /// AudsVulnerabilityService constructor
        /// </summary>        
        /// <param name="_audsVulnerabilityRepository"></param>        
        /// <param name="_adapter"></param>
        /// <param name="logRecordUtilityExtension"></param>
        public AudsVulnerabilityService(
           IAudsVulnerabilityRepository _audsVulnerabilityRepository,
           IBaseAdapter<AudsVulnerabilityDto, AudsVulnerability> _adapter,
           IDataMasterZeusService dataMasterZeusService,
           IAudsStateService audsStateService,
           IAudsRiskService audsRiskService)
        {
            audsVulnerabilityRepository = _audsVulnerabilityRepository ?? throw new ArgumentNullException(nameof(_audsVulnerabilityRepository));
            adapter = _adapter ?? throw new ArgumentNullException(nameof(_adapter));
            _dataMasterZeusService = dataMasterZeusService ?? throw new ArgumentNullException(nameof(dataMasterZeusService));
            _audsStateService = audsStateService ?? throw new ArgumentNullException(nameof(audsStateService));
            _audsRiskService = audsRiskService ?? throw new ArgumentNullException(nameof(audsRiskService));
        }

        /// <summary>
        /// Get AudsVulnerabilitys filtered
        /// </summary>
        /// <param name="filter"></param>
        /// <returns>AudsVulnerability list</returns>
        public async Task<System.Collections.Generic.IList<AudsVulnerabilityDto>> GetList(IAudsVulnerabilityFilter filter)
        {
            var result = adapter.Map(await audsVulnerabilityRepository.GetList(filter));
            foreach (var item in result)
            {
                await LoadData(item);
            }
            return result;
        }


        /// <summary>
        /// Insert an AudsAudit
        /// </summary>
        /// <param name="dataDto"></param>
        /// <returns>AudsAuditDto</returns>
        public async Task<AudsVulnerabilityDto> LoadData(AudsVulnerabilityDto dataDto)
        {
            if (dataDto != null)
            {
                var responsible = await _dataMasterZeusService.GetEmployeeDataById(dataDto.VulnerabilityResponsible);
                if (responsible != null && responsible.IdPersona > 0)
                {
                    dataDto.VulnerabilityResponsibleReference = responsible;
                    dataDto.VulnerabilityResponsibleDescription = responsible.TxtNombre + " " + responsible.TxtApellido1 + " " + responsible.TxtApellido2;
                }

                var state = await _audsStateService.Get(dataDto.StateId);
                dataDto.StateReference = state;
                dataDto.StateDescription = state.StateName;

                var stateResolution = await _audsStateService.Get(dataDto.StateIdResolution);
                dataDto.StateResolutionReference = stateResolution;
                dataDto.StateResolutionDescription = stateResolution.StateName;

                var risk = await _audsRiskService.Get(dataDto.RiskId);
                dataDto.RiskReference = risk;
                dataDto.RiskDescription = risk.RiskName;

                //var audit = await _audsAuditService.Get(dataDto.AuditId);
                //dataDto.AuditReference = audit;

            }

            return dataDto;
        }
    }
}