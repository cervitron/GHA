using everisIT.AUDS.Service.Application.Adapters.Interfaces;
using everisIT.AUDS.Service.Application.Dtos;
using everisIT.AUDS.Service.Application.Services.Interfaces;
using everisIT.AUDS.Service.Infrastructure.Filters.Interfaces;
using everisIT.AUDS.Service.Infrastructure.Models;
using everisIT.AUDS.Service.Infrastructure.Repositories.Interfaces;
using System;
using System.Threading.Tasks;

namespace everisIT.AUDS.Service.Application.Services
{
    public partial class AudsVulnerabilityHcoService : IAudsVulnerabilityHcoService
    {
        private readonly IAudsVulnerabilityHcoRepository audsVulnerabilityHcoRepository;
		private readonly IBaseAdapter<AudsVulnerabilityHcoDto, AudsVulnerabilityHco> adapter;

        /// <summary>
        /// AudsVulnerabilityHcoService constructor
        /// </summary>        
        /// <param name="_audsVulnerabilityHcoRepository"></param>        
        /// <param name="_adapter"></param>
        /// <param name="logRecordUtilityExtension"></param>
        public AudsVulnerabilityHcoService(
           IAudsVulnerabilityHcoRepository _audsVulnerabilityHcoRepository,
           IBaseAdapter<AudsVulnerabilityHcoDto, AudsVulnerabilityHco> _adapter)
        {
			audsVulnerabilityHcoRepository = _audsVulnerabilityHcoRepository ?? throw new ArgumentNullException(nameof(_audsVulnerabilityHcoRepository));
            adapter = _adapter ?? throw new ArgumentNullException(nameof(_adapter));
        }
        /// <summary>
        /// Insert an AudsVulnerabilityHco
        /// </summary>
        /// <param name="dataDto"></param>
        /// <returns>AudsVulnerabilityHcoDto</returns>
        public async Task<AudsVulnerabilityHcoDto> Create(AudsVulnerabilityHcoDto dataDto)
        {            
            if (dataDto == null)
            {
                return new AudsVulnerabilityHcoDto();
            }
            return adapter.Map(await audsVulnerabilityHcoRepository.Create(adapter.Map(dataDto)));            
        }

        /// <summary>
        /// Get AudsVulnerabilityHcos filtered
        /// </summary>
        /// <param name="filter"></param>
        /// <returns>AudsVulnerabilityHco list</returns>
        public async Task<System.Collections.Generic.IList<AudsVulnerabilityHcoDto>> GetList(IAudsVulnerabilityHcoFilter filter)
        {
            return adapter.Map(await audsVulnerabilityHcoRepository.GetList(filter));            
        }

        /// <summary>
        /// Update the AudsVulnerabilityHco Status to Enable or Disable it
        /// </summary>
        /// <param name="id"></param>
        /// <returns>AudsVulnerabilityHco ID</returns>
        public async Task<AudsVulnerabilityHcoDto> Delete(int id)
        {
            return adapter.Map(await audsVulnerabilityHcoRepository.Delete(id));            
        }

        /// <summary>
        /// Update an audsVulnerabilityHco to a new audsVulnerabilityHco object passed by parameter
        /// </summary>
        /// <param name="dataDto"></param>
        /// <returns>AudsVulnerabilityHco ID</returns>
        public async Task<AudsVulnerabilityHcoDto> Update(AudsVulnerabilityHcoDto dataDto)
        {            
            if (dataDto == null)
            {
                return new AudsVulnerabilityHcoDto();
            }
            return adapter.Map(await audsVulnerabilityHcoRepository.Update(adapter.Map(dataDto)));            
        }

        public async Task<AudsVulnerabilityHcoDto> Get(int id)
        {            
            return adapter.Map(await audsVulnerabilityHcoRepository.Get(id));
        }
    }
}