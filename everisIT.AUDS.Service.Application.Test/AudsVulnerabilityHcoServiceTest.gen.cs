using everisIT.AUDS.Service.Application.Adapters;
using everisIT.AUDS.Service.Application.Adapters.Interfaces;
using everisIT.AUDS.Service.Application.Dtos;
using everisIT.AUDS.Service.Application.Services;
using everisIT.AUDS.Service.Application.Services.Interfaces;
using everisIT.AUDS.Service.Infrastructure.Filters;
using everisIT.AUDS.Service.Infrastructure.Filters.Interfaces;
using everisIT.AUDS.Service.Infrastructure.Models;
using everisIT.AUDS.Service.Infrastructure.Repositories.Interfaces;
using Moq;
using System;
using System.Collections.Generic;
using System.Linq;
using Xunit;

namespace everisIT.AUDS.Service.AudsVulnerabilityHcoTest
{
    [Collection("Sequential")]
    public partial class AudsVulnerabilityHcoServiceTest
    {
        private readonly Mock<IAudsVulnerabilityHcoRepository> _audsVulnerabilityHcoRepository;
        private readonly IAudsVulnerabilityHcoService _audsVulnerabilityHcoService;
        private readonly IAudsVulnerabilityHcoService _audsVulnerabilityHcoServiceMockAdapter;
		private readonly IBaseAdapter<AudsVulnerabilityHcoDto, AudsVulnerabilityHco> adapter;
        Mock<IBaseAdapter<AudsVulnerabilityHcoDto, AudsVulnerabilityHco>> mockAdapter;

        public AudsVulnerabilityHcoServiceTest()
        {
            //Arrange
			adapter = new AudsVulnerabilityHcoAdapter();
            mockAdapter = new Mock<IBaseAdapter<AudsVulnerabilityHcoDto, AudsVulnerabilityHco>>();
            _audsVulnerabilityHcoRepository = new Mock<IAudsVulnerabilityHcoRepository>();
            _audsVulnerabilityHcoService = new AudsVulnerabilityHcoService(_audsVulnerabilityHcoRepository.Object, adapter);
            _audsVulnerabilityHcoServiceMockAdapter = new AudsVulnerabilityHcoService(_audsVulnerabilityHcoRepository.Object, mockAdapter.Object);
        }

		[Fact]
        [Trait("Category", "UnitTests")]
        [Trait("Category", "AudsVulnerabilityHcoService")]
        [Trait("Category", "OK")]
        [Trait("Category", "Constructor")]
        public void Constructor_Test_Exception()
        {
            AudsVulnerabilityHcoService audsVulnerabilityHcoService;

            Assert.Throws<ArgumentNullException>(() => audsVulnerabilityHcoService = new AudsVulnerabilityHcoService(null, adapter));
            Assert.Throws<ArgumentNullException>(() => audsVulnerabilityHcoService = new AudsVulnerabilityHcoService(_audsVulnerabilityHcoRepository.Object, null));
        }

        [Fact]
        [Trait("Category", "UnitTests")]
        [Trait("Category", "AudsVulnerabilityHcoService")]
        [Trait("Category", "OK")]
        [Trait("Category", "AudsVulnerabilityHcoUnitTest")]
        public void Insert_AudsVulnerabilityHco_Test_OK()
        {
            //Arrange
            var entityModel = new AudsVulnerabilityHco() { VulnerabilityHcoId = 1 };
            var entityDto = new AudsVulnerabilityHcoDto() { VulnerabilityHcoId = 1 };
            _audsVulnerabilityHcoRepository.Setup(x => x.Create(It.IsAny<AudsVulnerabilityHco>())).ReturnsAsync(entityModel);
            //Action
            var result = _audsVulnerabilityHcoService.Create(entityDto).Result;
            //Assert
            Assert.NotNull(result);        
        }

        [Fact]
        [Trait("Category", "UnitTests")]
        [Trait("Category", "AudsVulnerabilityHcoService")]
        [Trait("Category", "KO")]
        [Trait("Category", "AudsVulnerabilityHcoUnitTest")]
        public void Insert_AudsVulnerabilityHco_Test_KO()
        {
            //Arrange
            AudsVulnerabilityHco resultRepository = new AudsVulnerabilityHco();
            _audsVulnerabilityHcoRepository.Setup(x => x.Create(null)).ReturnsAsync(resultRepository);
            //Action
            var result = _audsVulnerabilityHcoService.Create(null).Result;
            //Assert
            Assert.NotNull(result);
            Assert.Equal(0, result.VulnerabilityHcoId);
        }

        [Fact]
        [Trait("Category", "UnitTests")]
        [Trait("Category", "AudsVulnerabilityHcoService")]
        [Trait("Category", "OK")]
        [Trait("Category", "AudsVulnerabilityHcoUnitTest")]
        public void GetList_AudsVulnerabilityHcos_Test_OK()
        {
            //Arrange
            var inEntityModel = new AudsVulnerabilityHco() { VulnerabilityHcoId = 1 };
            var outEntityModelDto = new AudsVulnerabilityHcoDto() { VulnerabilityHcoId = 1 };
            List<AudsVulnerabilityHco> listAudsVulnerabilityHco = new List<AudsVulnerabilityHco>{ inEntityModel };
            List<AudsVulnerabilityHcoDto> listAUDSAudsVulnerabilityHcoDto = new List<AudsVulnerabilityHcoDto>{ outEntityModelDto };
            IAudsVulnerabilityHcoFilter filters = new AudsVulnerabilityHcoFilter()
            {
                CodeStatus = false
            };
            _audsVulnerabilityHcoRepository.Setup(x => x.GetList(It.IsAny<AudsVulnerabilityHcoFilter>())).ReturnsAsync(listAudsVulnerabilityHco);
            //Action
            var result = _audsVulnerabilityHcoService.GetList(filters).Result;
            //Assert
            Assert.NotNull(result);
        }

        [Fact]
        [Trait("Category", "UnitTests")]
        [Trait("Category", "AudsVulnerabilityHcoService")]
        [Trait("Category", "KO")]
        [Trait("Category", "AudsVulnerabilityHcoUnitTest")]
        public void GetList_AudsVulnerabilityHcos_Test_KO()
        {
            //Arrange
            _audsVulnerabilityHcoRepository.Setup(x => x.GetList(It.IsAny<IAudsVulnerabilityHcoFilter>())).ReturnsAsync(new List<AudsVulnerabilityHco>());
            IAudsVulnerabilityHcoFilter filters = new AudsVulnerabilityHcoFilter();
            //Action
            var result = _audsVulnerabilityHcoService.GetList(filters).Result;
            //Assert
            Assert.Equal(0, result.Count);
        }

        [Fact]
        [Trait("Category", "UnitTests")]
        [Trait("Category", "AudsVulnerabilityHcoService")]
        [Trait("Category", "OK")]
        [Trait("Category", "AudsVulnerabilityHcoUnitTest")]
        public void Delete_by_id_Test_OK()
        {
            //Arrange
            var entityModel = new AudsVulnerabilityHco(){ VulnerabilityHcoId = 1 };
            var entityDto = new AudsVulnerabilityHcoDto(){ VulnerabilityHcoId = 1 };
            _audsVulnerabilityHcoRepository.Setup(x => x.Delete(It.IsAny<int>())).ReturnsAsync(entityModel);
            //Action
            var result = _audsVulnerabilityHcoService.Delete(entityDto.VulnerabilityHcoId).Result;
            //Assert
            Assert.Equal(entityDto.VulnerabilityHcoId, result.VulnerabilityHcoId);
        }

        [Fact]
        [Trait("Category", "UnitTests")]
        [Trait("Category", "AudsVulnerabilityHcoService")]
        [Trait("Category", "KO")]
        [Trait("Category", "AudsVulnerabilityHcoUnitTest")]
        public void Delete_by_id_Test_KO()
        {
            //Arrange
            AudsVulnerabilityHcoDto result = null;
            mockAdapter.Setup(maper => maper.Map(It.IsAny<AudsVulnerabilityHco>())).Returns(result); 
			AudsVulnerabilityHco result1 = null;
            _audsVulnerabilityHcoRepository.Setup(x => x.Delete(0)).ReturnsAsync(result1);
            //Action && Assert
            Assert.Null(_audsVulnerabilityHcoServiceMockAdapter.Delete(0).Result);
        }

        [Fact]
        [Trait("Category", "UnitTests")]
        [Trait("Category", "AudsVulnerabilityHcoService")]
        [Trait("Category", "OK")]
        [Trait("Category", "AudsVulnerabilityHcoUnitTest")]
        public void Update_AudsVulnerabilityHco_Test_OK()
        {
            //Arrange
            var entityModel = new AudsVulnerabilityHco() { VulnerabilityHcoId = 1 };
            var entityDto = new AudsVulnerabilityHcoDto() { VulnerabilityHcoId = 1 };
            var dataList = new List<AudsVulnerabilityHco>{ entityModel };
            var dataListDto = new List<AudsVulnerabilityHcoDto>{ entityDto };
			_audsVulnerabilityHcoRepository.Setup(x => x.Update(It.IsAny<AudsVulnerabilityHco>())).ReturnsAsync(entityModel);
            //Action
            var result = _audsVulnerabilityHcoService.Update(entityDto).Result;
            //Assert
            Assert.NotNull(result);
            Assert.Equal(entityDto.VulnerabilityHcoId, result.VulnerabilityHcoId);
        }

        [Fact]
        [Trait("Category", "UnitTests")]
        [Trait("Category", "AudsVulnerabilityHcoService")]
        [Trait("Category", "KO")]
        [Trait("Category", "AudsVulnerabilityHcoUnitTest")]
        public void Update_AudsVulnerabilityHco_Test_KO()
        {
            //Arrange
			AudsVulnerabilityHco result = null;
            _audsVulnerabilityHcoRepository.Setup(x => x.Update(null)).ReturnsAsync(result);
            //Action && Assert
            Assert.NotNull(_audsVulnerabilityHcoService.Update(null).Result);
            Assert.Equal(0, _audsVulnerabilityHcoService.Update(null).Result.VulnerabilityHcoId);
        }

        [Fact]
        [Trait("Category", "UnitTests")]
        [Trait("Category", "AudsVulnerabilityHcoService")]
        [Trait("Category", "KO")]
        [Trait("Category", "AudsVulnerabilityHcoUnitTest")]
        public void Get_AudsVulnerabilityHco_by_id_Test_KO()
        {
            //Arrange
            int id = 1;
            AudsVulnerabilityHco result = new AudsVulnerabilityHco();
            _audsVulnerabilityHcoRepository.Setup(x => x.Get(It.IsAny<int>())).ReturnsAsync(result);
            //Action
            var resultGet = _audsVulnerabilityHcoService.Get(id).Result;
            //Assert
            Assert.Equal(0, resultGet.VulnerabilityHcoId);
        }

        [Fact]
        [Trait("Category", "UnitTests")]
        [Trait("Category", "AudsVulnerabilityHcoService")]
        [Trait("Category", "OK")]
        [Trait("Category", "AudsVulnerabilityHcoUnitTest")]
        public void Get_AudsVulnerabilityHco_by_id_Test_OK()
        {
            //Arrange
            int id = 1;
			AudsVulnerabilityHco entityModel = new AudsVulnerabilityHco() { VulnerabilityHcoId = 1 };
            _audsVulnerabilityHcoRepository.Setup(x => x.Get(It.IsAny<int>())).ReturnsAsync(entityModel);
            //Action
            var result = _audsVulnerabilityHcoService.Get(id).Result;
            //Assert
            Assert.Equal(entityModel.VulnerabilityHcoId, result.VulnerabilityHcoId);
        }
    }
}
