using System.Linq;

namespace everisIT.AUDS.Service.Infrastructure.Filters
{
    public partial class AudsVulnerabilityHcoFilter : Interfaces.IAudsVulnerabilityHcoFilter
    {
        /// <summary>
        /// Filter the status (Null=All,True=OnlyActive,False=OnlyInactive)
        /// </summary>
        public bool? CodeStatus { get; set; }
        public int? VulnerabilityHcoId { get; set; }
        public int? VulnerabilityId { get; set; }
        public string VulnerabilityIdControl { get; set; }
        public System.DateTime? VulnerabilityDateIdentification { get; set; }
        public System.DateTime? VulnerabilityDateMitigation { get; set; }
        public System.DateTime? VulnerabilityDateResolution { get; set; }
        public string VulnerabilityDescription { get; set; }
        public int? VulnerabilityResponsible { get; set; }
        public string VulnerabilityRemarks { get; set; }
        public int? StateId { get; set; }
        public int? StateIdResolution { get; set; }
        public int? RiskId { get; set; }
        public int? AuditId { get; set; }

        public IQueryable<Models.AudsVulnerabilityHco> Filtrate(IQueryable<Models.AudsVulnerabilityHco> entityModel)
        {
            if (CodeStatus != null && CodeStatus.HasValue)
                entityModel = entityModel.Where(entityModel => entityModel.CodeStatus.Equals(CodeStatus));

            if (VulnerabilityHcoId != null)
                entityModel = entityModel.Where(model => model.VulnerabilityHcoId == VulnerabilityHcoId);

            if (VulnerabilityId != null)
                entityModel = entityModel.Where(model => model.VulnerabilityId == VulnerabilityId);

            if(!string.IsNullOrEmpty(VulnerabilityIdControl))
                entityModel = entityModel.Where(model => model.VulnerabilityIdControl.ToLower().Contains(VulnerabilityIdControl.ToLower()));

            if (VulnerabilityDateIdentification != null)
                entityModel = entityModel.Where(model => model.VulnerabilityDateIdentification == VulnerabilityDateIdentification);

            if (VulnerabilityDateMitigation != null)
                entityModel = entityModel.Where(model => model.VulnerabilityDateMitigation == VulnerabilityDateMitigation);

            if (VulnerabilityDateResolution != null)
                entityModel = entityModel.Where(model => model.VulnerabilityDateResolution == VulnerabilityDateResolution);

            if(!string.IsNullOrEmpty(VulnerabilityDescription))
                entityModel = entityModel.Where(model => model.VulnerabilityDescription.ToLower().Contains(VulnerabilityDescription.ToLower()));

            if (VulnerabilityResponsible != null)
                entityModel = entityModel.Where(model => model.VulnerabilityResponsible == VulnerabilityResponsible);

            if(!string.IsNullOrEmpty(VulnerabilityRemarks))
                entityModel = entityModel.Where(model => model.VulnerabilityRemarks.ToLower().Contains(VulnerabilityRemarks.ToLower()));

            if (StateId != null)
                entityModel = entityModel.Where(model => model.StateId == StateId);

            if (StateIdResolution != null)
                entityModel = entityModel.Where(model => model.StateIdResolution == StateIdResolution);

            if (RiskId != null)
                entityModel = entityModel.Where(model => model.RiskId == RiskId);

            if (AuditId != null)
                entityModel = entityModel.Where(model => model.AuditId == AuditId);

            return entityModel;
        }
    }
}