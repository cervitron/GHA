using everisIT.AUDS.Service.Infrastructure.Filters;
using everisIT.AUDS.Service.Infrastructure.Models;
using everisIT.AUDS.Service.Infrastructure.Repositories;
using everisIT.AUDS.Service.Infrastructure.Repositories.Interfaces;
using everisIT.AUDS.Service.Infrastructure.Test.DataTest;
using Microsoft.EntityFrameworkCore;
using System.Linq;
using Xunit;

namespace everisIT.AUDS.Service.Infrastructure.Test
{
    [Collection("Sequential")]
    public partial class AudsVulnerabilityRepositoryTest
    {
        private readonly IAudsVulnerabilityRepository _audsVulnerabilityRepository;
        private readonly AUDSContextTest _aUDSContextTest;
        private readonly Fen2.Utils.EF.IUserResolverService _userResolver;

        public AudsVulnerabilityRepositoryTest()
        {
            _userResolver = new Fen2.Utils.EF.MoqUserResolverService();
            _aUDSContextTest = new AUDSContextTest(_userResolver, new DbContextOptions<AUDSContext>());
            _audsVulnerabilityRepository = new AudsVulnerabilityRepository(_aUDSContextTest);
            AudsVulnerabilityRepositoryDataTest.LoadContext(_aUDSContextTest);
        }

        [Fact]
        [Trait("Category", "UnitTests")]
        [Trait("Category", "AudsVulnerabilityRepository")]
        [Trait("Category", "OK")]
        [Trait("Category", "AudsVulnerabilityUnitTest")]
        public void Create_AudsVulnerability_Test_OK()
        {
            //Arrange 
            var audsVulnerabilityModel = _aUDSContextTest.AudsVulnerability.FirstOrDefault();
            audsVulnerabilityModel.VulnerabilityId = 0;
            //Action
            var iResult = _audsVulnerabilityRepository.Create(audsVulnerabilityModel).Result;
            //Assert
            Assert.Equal(audsVulnerabilityModel.VulnerabilityId, iResult.VulnerabilityId);
        }

        [Fact]
        [Trait("Category", "UnitTests")]
        [Trait("Category", "AudsVulnerabilityRepository")]
        [Trait("Category", "OK")]
        [Trait("Category", "AudsVulnerabilityUnitTest")]
        public void Get_All_AudsVulnerability_Test_OK()
        {
            //Action            
            var result = _audsVulnerabilityRepository.GetList(null).Result;
            //Assert
            Assert.Equal(_aUDSContextTest.AudsVulnerability.Count(), result.Count());
        }

        [Fact]
        [Trait("Category", "UnitTests")]
        [Trait("Category", "AudsVulnerabilityRepository")]
        [Trait("Category", "KO")]
        [Trait("Category", "AudsVulnerabilityUnitTest")]
        public void Get_AudsVulnerability_Filtered_Test_KO()
        {
            //Arrange            
            var result = _audsVulnerabilityRepository.GetList(new AudsVulnerabilityFilter() { VulnerabilityId = 0}).Result;
            //Assert
            Assert.Empty(result);
        }

        [Fact]
        [Trait("Category", "UnitTests")]
        [Trait("Category", "AudsVulnerabilityRepository")]
        [Trait("Category", "OK")]
        [Trait("Category", "AudsVulnerabilityUnitTest")]
        public void Update_AudsVulnerability_Test_OK()
        {
            //Arrange           
            var audsVulnerabilityToUpdate = _aUDSContextTest.AudsVulnerability.FirstOrDefault();
            var originalValue = audsVulnerabilityToUpdate.CodeStatus;

            var updatedValue = originalValue.Equals(true) ? false : true;
            audsVulnerabilityToUpdate.CodeStatus = updatedValue;
            //Action
            var result = _audsVulnerabilityRepository.Update(audsVulnerabilityToUpdate).Result;
            //Assert
            Assert.NotEqual(originalValue, result.CodeStatus);
            Assert.Equal(updatedValue, result.CodeStatus);
        }

        [Fact]
        [Trait("Category", "UnitTests")]
        [Trait("Category", "AudsVulnerabilityRepository")]
        [Trait("Category", "OK")]
        [Trait("Category", "AudsVulnerabilityUnitTest")]
        public void Delete_AudsVulnerability_Test_OK()
        {
            //Arrange
            var audsVulnerabilityModel = _aUDSContextTest.AudsVulnerability.Where(x => x.CodeStatus == true).FirstOrDefault();
            var codeStatusOriginal = audsVulnerabilityModel.CodeStatus;
            //Action
            var audsVulnerabilityUpdated = _audsVulnerabilityRepository.Delete(audsVulnerabilityModel.VulnerabilityId).Result;
            //Assert
            Assert.Equal(audsVulnerabilityUpdated.VulnerabilityId, audsVulnerabilityModel.VulnerabilityId);
            Assert.NotEqual(audsVulnerabilityUpdated.CodeStatus, codeStatusOriginal);//Uncomment only in case there is a logical deletion.
        }

        [Fact]
        [Trait("Category", "UnitTests")]
        [Trait("Category", "AudsVulnerabilityRepository")]
        [Trait("Category", "KO")]
        [Trait("Category", "AudsVulnerabilityUnitTest")]
        public void Delete_AudsVulnerability_Test_KO()
        {
            //Action
            var iAudsVulnerabilityUpdated = _audsVulnerabilityRepository.Delete(0).Result;
            //Assert
            Assert.Equal(0, iAudsVulnerabilityUpdated.VulnerabilityId);
        }

        [Fact]
        [Trait("Category", "UnitTests")]
        [Trait("Category", "AudsVulnerabilityRepository")]
        [Trait("Category", "OK")]
        [Trait("Category", "AudsVulnerabilityUnitTest")]
        public void Get_AudsVulnerability_by_id_Test_OK()
        {
            //Arrange
            var id = 3;
            //Action
            var result = _audsVulnerabilityRepository.Get(id).Result;
            //Assert
            Assert.Equal(id, result.VulnerabilityId);
        }

        [Fact]
        [Trait("Category", "UnitTests")]
        [Trait("Category", "AudsVulnerabilityRepository")]
        [Trait("Category", "KO")]
        [Trait("Category", "AudsVulnerabilityUnitTest")]
        public void Get_AudsVulnerability_by_id_Test_KO()
        {
            //Arrange
            var id = -1;
            //Action
            var result = _audsVulnerabilityRepository.Get(id).Result;
            //Assert
            Assert.Equal(0, result.VulnerabilityId);
        }
    }
}